{
  "swagger": "2.0",
  "schemes": [
    "http"
  ],
  "info": {
    "title": "OpenAPI Book Store Public API",
    "description": "OpenAPI Book Store Public REST API",
    "version": "1.0.0",
    "termsOfService": "https://www.openapibookstore.com/terms_of_service",
    "contact": {
      "name": "Open API Book Store Support Team",
      "url": "http://www.openapibookstore.com",
      "email": "support@openapibookstore.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "tags": [
    {
      "name": "Authors",
      "description": "View and manage book authors"
    },
    {
      "name": "Books",
      "description": "View and manage books"
    },
    {
      "name": "Genres",
      "description": "View and manage genre genres"
    },
    {
      "name": "Orders",
      "description": "Comprehensive list of available orders"
    },
    {
      "name": "Users",
      "description": "Comprehensive list of available users"
    }
  ],
  "paths": {
    "/authors.{format}": {
      "get": {
        "tags": [
          "Authors"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "schema": {
              "$ref": "#/definitions/author_list_response"
            }
          },
          "400": {
            "description": "Not found"
          },
          "401": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Not authorized (typically missing / invalid access token)"
          }
        },
        "response": "author_object_response",
        "description": "Retrieve list of available authors",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Authorization header (format: \"Bearer &lt;access token&gt;\")",
            "required": false
          },
          {
            "name": "access_token",
            "in": "query",
            "type": "string",
            "description": "OAuth 2 access token query parameter",
            "required": false
          }
        ]
      },
      "post": {
        "tags": [
          "Authors"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "schema": {
              "$ref": "#/definitions/author_object_response"
            }
          },
          "400": {
            "description": "Not found"
          },
          "401": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Not authorized (typically missing / invalid access token)"
          }
        },
        "description": "Create a new author",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Authorization header (format: \"Bearer &lt;access token&gt;\")",
            "required": false
          },
          {
            "name": "access_token",
            "in": "query",
            "type": "string",
            "description": "OAuth 2 access token query parameter",
            "required": false
          },
          {
            "name": "body",
            "in": "body",
            "description": "Payload",
            "schema": {
              "$ref": "#/definitions/author_payload"
            }
          }
        ]
      }
    },
    "/authors/:author_id.{format}": {
      "get": {
        "tags": [
          "Authors"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "schema": {
              "$ref": "#/definitions/author_object_response"
            }
          },
          "400": {
            "description": "Not found"
          },
          "401": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Not authorized (typically missing / invalid access token)"
          }
        },
        "description": "Retrieve details for a specific author",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Authorization header (format: \"Bearer &lt;access token&gt;\")",
            "required": false
          },
          {
            "name": "access_token",
            "in": "query",
            "type": "string",
            "description": "OAuth 2 access token query parameter",
            "required": false
          }
        ]
      },
      "patch": {
        "tags": [
          "Authors"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "schema": {
              "$ref": "#/definitions/author_object_response"
            }
          },
          "400": {
            "description": "Not found"
          },
          "401": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Not authorized (typically missing / invalid access token)"
          }
        },
        "description": "Update an existing author",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Authorization header (format: \"Bearer &lt;access token&gt;\")",
            "required": false
          },
          {
            "name": "access_token",
            "in": "query",
            "type": "string",
            "description": "OAuth 2 access token query parameter",
            "required": false
          },
          {
            "name": "body",
            "in": "body",
            "description": "Payload",
            "schema": {
              "$ref": "#/definitions/author_payload"
            }
          }
        ]
      },
      "put": {
        "tags": [
          "Authors"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "schema": {
              "$ref": "#/definitions/author_object_response"
            }
          },
          "400": {
            "description": "Not found"
          },
          "401": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Not authorized (typically missing / invalid access token)"
          }
        },
        "description": "Update an existing author",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Authorization header (format: \"Bearer &lt;access token&gt;\")",
            "required": false
          },
          {
            "name": "access_token",
            "in": "query",
            "type": "string",
            "description": "OAuth 2 access token query parameter",
            "required": false
          },
          {
            "name": "body",
            "in": "body",
            "description": "Payload",
            "schema": {
              "$ref": "#/definitions/author_payload"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "Authors"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "schema": {
              "$ref": "#/definitions/author_object_response"
            }
          },
          "400": {
            "description": "Not found"
          },
          "401": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Not authorized (typically missing / invalid access token)"
          }
        },
        "description": "Delete an existing author",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Authorization header (format: \"Bearer &lt;access token&gt;\")",
            "required": false
          },
          {
            "name": "access_token",
            "in": "query",
            "type": "string",
            "description": "OAuth 2 access token query parameter",
            "required": false
          }
        ]
      }
    },
    "/books.{format}": {
      "get": {
        "tags": [
          "Books"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "schema": {
              "$ref": "#/definitions/book_list_response"
            }
          },
          "400": {
            "description": "Not found"
          },
          "401": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Not authorized (typically missing / invalid access token)"
          }
        },
        "response": "book_object_response",
        "description": "Retrieve list of available books",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Authorization header (format: \"Bearer &lt;access token&gt;\")",
            "required": false
          },
          {
            "name": "access_token",
            "in": "query",
            "type": "string",
            "description": "OAuth 2 access token query parameter",
            "required": false
          }
        ]
      },
      "post": {
        "tags": [
          "Books"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "schema": {
              "$ref": "#/definitions/book_object_response"
            }
          },
          "400": {
            "description": "Not found"
          },
          "401": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Not authorized (typically missing / invalid access token)"
          }
        },
        "description": "Create a new book",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Authorization header (format: \"Bearer &lt;access token&gt;\")",
            "required": false
          },
          {
            "name": "access_token",
            "in": "query",
            "type": "string",
            "description": "OAuth 2 access token query parameter",
            "required": false
          },
          {
            "name": "body",
            "in": "body",
            "description": "Payload",
            "schema": {
              "$ref": "#/definitions/book_payload"
            }
          }
        ]
      }
    },
    "/books/:book_id.{format}": {
      "get": {
        "tags": [
          "Books"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "schema": {
              "$ref": "#/definitions/book_object_response"
            }
          },
          "400": {
            "description": "Not found"
          },
          "401": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Not authorized (typically missing / invalid access token)"
          }
        },
        "description": "Retrieve details for a specific book",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Authorization header (format: \"Bearer &lt;access token&gt;\")",
            "required": false
          },
          {
            "name": "access_token",
            "in": "query",
            "type": "string",
            "description": "OAuth 2 access token query parameter",
            "required": false
          }
        ]
      },
      "patch": {
        "tags": [
          "Books"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "schema": {
              "$ref": "#/definitions/book_object_response"
            }
          },
          "400": {
            "description": "Not found"
          },
          "401": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Not authorized (typically missing / invalid access token)"
          }
        },
        "description": "Update an existing book",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Authorization header (format: \"Bearer &lt;access token&gt;\")",
            "required": false
          },
          {
            "name": "access_token",
            "in": "query",
            "type": "string",
            "description": "OAuth 2 access token query parameter",
            "required": false
          },
          {
            "name": "body",
            "in": "body",
            "description": "Payload",
            "schema": {
              "$ref": "#/definitions/book_payload"
            }
          }
        ]
      },
      "put": {
        "tags": [
          "Books"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "schema": {
              "$ref": "#/definitions/book_object_response"
            }
          },
          "400": {
            "description": "Not found"
          },
          "401": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Not authorized (typically missing / invalid access token)"
          }
        },
        "description": "Update an existing book",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Authorization header (format: \"Bearer &lt;access token&gt;\")",
            "required": false
          },
          {
            "name": "access_token",
            "in": "query",
            "type": "string",
            "description": "OAuth 2 access token query parameter",
            "required": false
          },
          {
            "name": "body",
            "in": "body",
            "description": "Payload",
            "schema": {
              "$ref": "#/definitions/book_payload"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "Books"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "schema": {
              "$ref": "#/definitions/book_object_response"
            }
          },
          "400": {
            "description": "Not found"
          },
          "401": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Not authorized (typically missing / invalid access token)"
          }
        },
        "description": "Delete an existing book",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Authorization header (format: \"Bearer &lt;access token&gt;\")",
            "required": false
          },
          {
            "name": "access_token",
            "in": "query",
            "type": "string",
            "description": "OAuth 2 access token query parameter",
            "required": false
          }
        ]
      }
    },
    "/genres.{format}": {
      "get": {
        "tags": [
          "Genres"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "schema": {
              "$ref": "#/definitions/genre_list_response"
            }
          },
          "400": {
            "description": "Not found"
          },
          "401": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Not authorized (typically missing / invalid access token)"
          }
        },
        "response": "genre_object_response",
        "description": "Retrieve list of available genres",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Authorization header (format: \"Bearer &lt;access token&gt;\")",
            "required": false
          },
          {
            "name": "access_token",
            "in": "query",
            "type": "string",
            "description": "OAuth 2 access token query parameter",
            "required": false
          }
        ]
      },
      "post": {
        "tags": [
          "Genres"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "schema": {
              "$ref": "#/definitions/genre_object_response"
            }
          },
          "400": {
            "description": "Not found"
          },
          "401": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Not authorized (typically missing / invalid access token)"
          }
        },
        "description": "Create a new genre",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Authorization header (format: \"Bearer &lt;access token&gt;\")",
            "required": false
          },
          {
            "name": "access_token",
            "in": "query",
            "type": "string",
            "description": "OAuth 2 access token query parameter",
            "required": false
          },
          {
            "name": "body",
            "in": "body",
            "description": "Payload",
            "schema": {
              "$ref": "#/definitions/genre_payload"
            }
          }
        ]
      }
    },
    "/genres/:genre_id.{format}": {
      "get": {
        "tags": [
          "Genres"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "schema": {
              "$ref": "#/definitions/genre_object_response"
            }
          },
          "400": {
            "description": "Not found"
          },
          "401": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Not authorized (typically missing / invalid access token)"
          }
        },
        "description": "Retrieve details for a specific genre",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Authorization header (format: \"Bearer &lt;access token&gt;\")",
            "required": false
          },
          {
            "name": "access_token",
            "in": "query",
            "type": "string",
            "description": "OAuth 2 access token query parameter",
            "required": false
          }
        ]
      },
      "patch": {
        "tags": [
          "Genres"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "schema": {
              "$ref": "#/definitions/genre_object_response"
            }
          },
          "400": {
            "description": "Not found"
          },
          "401": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Not authorized (typically missing / invalid access token)"
          }
        },
        "description": "Update an existing genre",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Authorization header (format: \"Bearer &lt;access token&gt;\")",
            "required": false
          },
          {
            "name": "access_token",
            "in": "query",
            "type": "string",
            "description": "OAuth 2 access token query parameter",
            "required": false
          },
          {
            "name": "body",
            "in": "body",
            "description": "Payload",
            "schema": {
              "$ref": "#/definitions/genre_payload"
            }
          }
        ]
      },
      "put": {
        "tags": [
          "Genres"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "schema": {
              "$ref": "#/definitions/genre_object_response"
            }
          },
          "400": {
            "description": "Not found"
          },
          "401": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Not authorized (typically missing / invalid access token)"
          }
        },
        "description": "Update an existing genre",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Authorization header (format: \"Bearer &lt;access token&gt;\")",
            "required": false
          },
          {
            "name": "access_token",
            "in": "query",
            "type": "string",
            "description": "OAuth 2 access token query parameter",
            "required": false
          },
          {
            "name": "body",
            "in": "body",
            "description": "Payload",
            "schema": {
              "$ref": "#/definitions/genre_payload"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "Genres"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "schema": {
              "$ref": "#/definitions/genre_object_response"
            }
          },
          "400": {
            "description": "Not found"
          },
          "401": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Not authorized (typically missing / invalid access token)"
          }
        },
        "description": "Delete an existing genre",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Authorization header (format: \"Bearer &lt;access token&gt;\")",
            "required": false
          },
          {
            "name": "access_token",
            "in": "query",
            "type": "string",
            "description": "OAuth 2 access token query parameter",
            "required": false
          }
        ]
      }
    },
    "/orders.{format}": {
      "get": {
        "tags": [
          "Orders"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "schema": {
              "$ref": "#/definitions/order_list_response"
            }
          },
          "400": {
            "description": "Not found"
          },
          "401": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Not authorized (typically missing / invalid access token)"
          }
        },
        "response": "order_object_response",
        "description": "Retrieve list of available orders",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Authorization header (format: \"Bearer &lt;access token&gt;\")",
            "required": false
          },
          {
            "name": "access_token",
            "in": "query",
            "type": "string",
            "description": "OAuth 2 access token query parameter",
            "required": false
          }
        ]
      },
      "post": {
        "tags": [
          "Orders"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "schema": {
              "$ref": "#/definitions/order_object_response"
            }
          },
          "400": {
            "description": "Not found"
          },
          "401": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Not authorized (typically missing / invalid access token)"
          }
        },
        "description": "Create a new order",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Authorization header (format: \"Bearer &lt;access token&gt;\")",
            "required": false
          },
          {
            "name": "access_token",
            "in": "query",
            "type": "string",
            "description": "OAuth 2 access token query parameter",
            "required": false
          },
          {
            "name": "body",
            "in": "body",
            "description": "Payload",
            "schema": {
              "$ref": "#/definitions/order_payload"
            }
          }
        ]
      }
    },
    "/orders/:order_id.{format}": {
      "get": {
        "tags": [
          "Orders"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "schema": {
              "$ref": "#/definitions/order_object_response"
            }
          },
          "400": {
            "description": "Not found"
          },
          "401": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Not authorized (typically missing / invalid access token)"
          }
        },
        "description": "Retrieve details for a specific order",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Authorization header (format: \"Bearer &lt;access token&gt;\")",
            "required": false
          },
          {
            "name": "access_token",
            "in": "query",
            "type": "string",
            "description": "OAuth 2 access token query parameter",
            "required": false
          }
        ]
      },
      "patch": {
        "tags": [
          "Orders"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "schema": {
              "$ref": "#/definitions/order_object_response"
            }
          },
          "400": {
            "description": "Not found"
          },
          "401": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Not authorized (typically missing / invalid access token)"
          }
        },
        "description": "Update an existing order",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Authorization header (format: \"Bearer &lt;access token&gt;\")",
            "required": false
          },
          {
            "name": "access_token",
            "in": "query",
            "type": "string",
            "description": "OAuth 2 access token query parameter",
            "required": false
          },
          {
            "name": "body",
            "in": "body",
            "description": "Payload",
            "schema": {
              "$ref": "#/definitions/order_payload"
            }
          }
        ]
      },
      "put": {
        "tags": [
          "Orders"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "schema": {
              "$ref": "#/definitions/order_object_response"
            }
          },
          "400": {
            "description": "Not found"
          },
          "401": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Not authorized (typically missing / invalid access token)"
          }
        },
        "description": "Update an existing order",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Authorization header (format: \"Bearer &lt;access token&gt;\")",
            "required": false
          },
          {
            "name": "access_token",
            "in": "query",
            "type": "string",
            "description": "OAuth 2 access token query parameter",
            "required": false
          },
          {
            "name": "body",
            "in": "body",
            "description": "Payload",
            "schema": {
              "$ref": "#/definitions/order_payload"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "Orders"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "schema": {
              "$ref": "#/definitions/order_object_response"
            }
          },
          "400": {
            "description": "Not found"
          },
          "401": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Not authorized (typically missing / invalid access token)"
          }
        },
        "description": "Delete an existing order",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Authorization header (format: \"Bearer &lt;access token&gt;\")",
            "required": false
          },
          {
            "name": "access_token",
            "in": "query",
            "type": "string",
            "description": "OAuth 2 access token query parameter",
            "required": false
          }
        ]
      }
    },
    "/users.{format}": {
      "get": {
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "schema": {
              "$ref": "#/definitions/user_list_response"
            }
          },
          "400": {
            "description": "Not found"
          },
          "401": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Not authorized (typically missing / invalid access token)"
          }
        },
        "response": "user_object_response",
        "description": "Retrieve list of available users",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Authorization header (format: \"Bearer &lt;access token&gt;\")",
            "required": false
          },
          {
            "name": "access_token",
            "in": "query",
            "type": "string",
            "description": "OAuth 2 access token query parameter",
            "required": false
          }
        ]
      },
      "post": {
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "schema": {
              "$ref": "#/definitions/user_object_response"
            }
          },
          "400": {
            "description": "Not found"
          },
          "401": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Not authorized (typically missing / invalid access token)"
          }
        },
        "description": "Create a new user",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Authorization header (format: \"Bearer &lt;access token&gt;\")",
            "required": false
          },
          {
            "name": "access_token",
            "in": "query",
            "type": "string",
            "description": "OAuth 2 access token query parameter",
            "required": false
          },
          {
            "name": "body",
            "in": "body",
            "description": "Payload",
            "schema": {
              "$ref": "#/definitions/user_payload"
            }
          }
        ]
      }
    },
    "/users/:user_id.{format}": {
      "get": {
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "schema": {
              "$ref": "#/definitions/user_object_response"
            }
          },
          "400": {
            "description": "Not found"
          },
          "401": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Not authorized (typically missing / invalid access token)"
          }
        },
        "description": "Retrieve details for a specific user",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Authorization header (format: \"Bearer &lt;access token&gt;\")",
            "required": false
          },
          {
            "name": "access_token",
            "in": "query",
            "type": "string",
            "description": "OAuth 2 access token query parameter",
            "required": false
          }
        ]
      },
      "patch": {
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "schema": {
              "$ref": "#/definitions/user_object_response"
            }
          },
          "400": {
            "description": "Not found"
          },
          "401": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Not authorized (typically missing / invalid access token)"
          }
        },
        "description": "Update an existing user",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Authorization header (format: \"Bearer &lt;access token&gt;\")",
            "required": false
          },
          {
            "name": "access_token",
            "in": "query",
            "type": "string",
            "description": "OAuth 2 access token query parameter",
            "required": false
          },
          {
            "name": "body",
            "in": "body",
            "description": "Payload",
            "schema": {
              "$ref": "#/definitions/user_payload"
            }
          }
        ]
      },
      "put": {
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "schema": {
              "$ref": "#/definitions/user_object_response"
            }
          },
          "400": {
            "description": "Not found"
          },
          "401": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Not authorized (typically missing / invalid access token)"
          }
        },
        "description": "Update an existing user",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Authorization header (format: \"Bearer &lt;access token&gt;\")",
            "required": false
          },
          {
            "name": "access_token",
            "in": "query",
            "type": "string",
            "description": "OAuth 2 access token query parameter",
            "required": false
          },
          {
            "name": "body",
            "in": "body",
            "description": "Payload",
            "schema": {
              "$ref": "#/definitions/user_payload"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "schema": {
              "$ref": "#/definitions/user_object_response"
            }
          },
          "400": {
            "description": "Not found"
          },
          "401": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Not authorized (typically missing / invalid access token)"
          }
        },
        "description": "Delete an existing user",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Authorization header (format: \"Bearer &lt;access token&gt;\")",
            "required": false
          },
          {
            "name": "access_token",
            "in": "query",
            "type": "string",
            "description": "OAuth 2 access token query parameter",
            "required": false
          }
        ]
      }
    }
  },
  "definitions": {
    "author_payload": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "displayName": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "primaryGenre": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "format": "int32"
            },
            "name": {
              "type": "string"
            }
          },
          "required": [
            "id",
            "name"
          ]
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "displayName",
        "firstName",
        "lastName",
        "primaryGenre",
        "createdAt",
        "updatedAt"
      ]
    },
    "author_list_response": {
      "type": "object",
      "properties": {
        "successful": {
          "type": "boolean"
        },
        "status": {
          "type": "string"
        },
        "statusCode": {
          "type": "integer",
          "format": "int32"
        },
        "authors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/author_payload"
          }
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "page": {
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "successful",
        "status",
        "statusCode",
        "authors",
        "count",
        "page",
        "pageCount",
        "pageSize"
      ]
    },
    "author_object_response": {
      "type": "object",
      "properties": {
        "successful": {
          "type": "boolean"
        },
        "status": {
          "type": "string"
        },
        "statusCode": {
          "type": "integer",
          "format": "int32"
        },
        "author": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "format": "int32"
            },
            "displayName": {
              "type": "string"
            },
            "firstName": {
              "type": "string"
            },
            "lastName": {
              "type": "string"
            },
            "primaryGenre": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int32"
                },
                "name": {
                  "type": "string"
                }
              },
              "required": [
                "id",
                "name"
              ]
            },
            "createdAt": {
              "type": "string",
              "format": "date-time"
            },
            "updatedAt": {
              "type": "string",
              "format": "date-time"
            }
          },
          "required": [
            "id",
            "displayName",
            "firstName",
            "lastName",
            "primaryGenre",
            "createdAt",
            "updatedAt"
          ]
        }
      },
      "required": [
        "successful",
        "status",
        "statusCode",
        "author"
      ]
    },
    "book_author_payload": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "displayName": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        }
      },
      "required": [
        "id",
        "displayName",
        "firstName",
        "lastName"
      ]
    },
    "book_payload": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "isbn": {
          "type": "string"
        },
        "price": {
          "type": "number",
          "format": "float"
        },
        "authors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/book_author_payload"
          }
        },
        "primaryGenre": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "format": "int32"
            },
            "name": {
              "type": "string"
            }
          },
          "required": [
            "id",
            "name"
          ]
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "name",
        "description",
        "isbn",
        "price",
        "authors",
        "primaryGenre",
        "createdAt",
        "updatedAt"
      ]
    },
    "book_list_response": {
      "type": "object",
      "properties": {
        "successful": {
          "type": "boolean"
        },
        "status": {
          "type": "string"
        },
        "statusCode": {
          "type": "integer",
          "format": "int32"
        },
        "books": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/book_payload"
          }
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "page": {
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "successful",
        "status",
        "statusCode",
        "books",
        "count",
        "page",
        "pageCount",
        "pageSize"
      ]
    },
    "book_object_response": {
      "type": "object",
      "properties": {
        "successful": {
          "type": "boolean"
        },
        "status": {
          "type": "string"
        },
        "statusCode": {
          "type": "integer",
          "format": "int32"
        },
        "book": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "format": "int32"
            },
            "name": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "isbn": {
              "type": "string"
            },
            "price": {
              "type": "number",
              "format": "float"
            },
            "authors": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/book_author_payload"
              }
            },
            "primaryGenre": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int32"
                },
                "name": {
                  "type": "string"
                }
              },
              "required": [
                "id",
                "name"
              ]
            },
            "createdAt": {
              "type": "string",
              "format": "date-time"
            },
            "updatedAt": {
              "type": "string",
              "format": "date-time"
            }
          },
          "required": [
            "id",
            "name",
            "description",
            "isbn",
            "price",
            "authors",
            "primaryGenre",
            "createdAt",
            "updatedAt"
          ]
        }
      },
      "required": [
        "successful",
        "status",
        "statusCode",
        "book"
      ]
    },
    "genre_payload": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "name",
        "createdAt",
        "updatedAt"
      ]
    },
    "genre_list_response": {
      "type": "object",
      "properties": {
        "successful": {
          "type": "boolean"
        },
        "status": {
          "type": "string"
        },
        "statusCode": {
          "type": "integer",
          "format": "int32"
        },
        "genres": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/genre_payload"
          }
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "page": {
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "successful",
        "status",
        "statusCode",
        "genres",
        "count",
        "page",
        "pageCount",
        "pageSize"
      ]
    },
    "genre_object_response": {
      "type": "object",
      "properties": {
        "successful": {
          "type": "boolean"
        },
        "status": {
          "type": "string"
        },
        "statusCode": {
          "type": "integer",
          "format": "int32"
        },
        "genre": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "format": "int32"
            },
            "name": {
              "type": "string"
            },
            "createdAt": {
              "type": "string",
              "format": "date-time"
            },
            "updatedAt": {
              "type": "string",
              "format": "date-time"
            }
          },
          "required": [
            "id",
            "name",
            "createdAt",
            "updatedAt"
          ]
        }
      },
      "required": [
        "successful",
        "status",
        "statusCode",
        "genre"
      ]
    },
    "order_item_payload": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "productId": {
          "type": "integer",
          "format": "int32"
        },
        "sku": {
          "type": "string"
        },
        "quantity": {
          "type": "integer",
          "format": "int32"
        },
        "price": {
          "type": "number",
          "format": "float"
        },
        "tax": {
          "type": "number",
          "format": "float"
        },
        "shipping": {
          "type": "number",
          "format": "float"
        },
        "total": {
          "type": "number",
          "format": "float"
        }
      },
      "required": [
        "id",
        "productId",
        "sku",
        "quantity",
        "price",
        "tax",
        "shipping",
        "total"
      ]
    },
    "order_payload": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "user": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "format": "int32"
            },
            "username": {
              "type": "string"
            },
            "email": {
              "type": "string"
            }
          },
          "required": [
            "id",
            "username",
            "email"
          ]
        },
        "orderItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/order_item_payload"
          }
        },
        "orderTotal": {
          "type": "number",
          "format": "float"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "user",
        "orderItems",
        "orderTotal",
        "createdAt",
        "updatedAt"
      ]
    },
    "order_list_response": {
      "type": "object",
      "properties": {
        "successful": {
          "type": "boolean"
        },
        "status": {
          "type": "string"
        },
        "statusCode": {
          "type": "integer",
          "format": "int32"
        },
        "orders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/order_payload"
          }
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "page": {
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "successful",
        "status",
        "statusCode",
        "orders",
        "count",
        "page",
        "pageCount",
        "pageSize"
      ]
    },
    "order_object_response": {
      "type": "object",
      "properties": {
        "successful": {
          "type": "boolean"
        },
        "status": {
          "type": "string"
        },
        "statusCode": {
          "type": "integer",
          "format": "int32"
        },
        "order": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "format": "int32"
            },
            "user": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int32"
                },
                "username": {
                  "type": "string"
                },
                "email": {
                  "type": "string"
                }
              },
              "required": [
                "id",
                "username",
                "email"
              ]
            },
            "orderItems": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/order_item_payload"
              }
            },
            "orderTotal": {
              "type": "number",
              "format": "float"
            },
            "createdAt": {
              "type": "string",
              "format": "date-time"
            },
            "updatedAt": {
              "type": "string",
              "format": "date-time"
            }
          },
          "required": [
            "id",
            "user",
            "orderItems",
            "orderTotal",
            "createdAt",
            "updatedAt"
          ]
        }
      },
      "required": [
        "successful",
        "status",
        "statusCode",
        "order"
      ]
    },
    "user_payload": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "last_login_at": {
          "type": "string",
          "format": "date-time"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "firstName",
        "lastName",
        "email",
        "last_login_at",
        "createdAt",
        "updatedAt"
      ]
    },
    "user_list_response": {
      "type": "object",
      "properties": {
        "successful": {
          "type": "boolean"
        },
        "status": {
          "type": "string"
        },
        "statusCode": {
          "type": "integer",
          "format": "int32"
        },
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/user_payload"
          }
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "page": {
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "successful",
        "status",
        "statusCode",
        "users",
        "count",
        "page",
        "pageCount",
        "pageSize"
      ]
    },
    "user_object_response": {
      "type": "object",
      "properties": {
        "successful": {
          "type": "boolean"
        },
        "status": {
          "type": "string"
        },
        "statusCode": {
          "type": "integer",
          "format": "int32"
        },
        "user": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "format": "int32"
            },
            "firstName": {
              "type": "string"
            },
            "lastName": {
              "type": "string"
            },
            "email": {
              "type": "string"
            },
            "last_login_at": {
              "type": "string",
              "format": "date-time"
            },
            "createdAt": {
              "type": "string",
              "format": "date-time"
            },
            "updatedAt": {
              "type": "string",
              "format": "date-time"
            }
          },
          "required": [
            "id",
            "firstName",
            "lastName",
            "email",
            "last_login_at",
            "createdAt",
            "updatedAt"
          ]
        }
      },
      "required": [
        "successful",
        "status",
        "statusCode",
        "user"
      ]
    }
  }
}